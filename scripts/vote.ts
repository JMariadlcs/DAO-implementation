import { ethers, network } from "hardhat";
import { developmentChains, PROPOSAL_FILE, VOTE_REASON, VOTING_PERIOD} from "../hardhat-helper-config";
import * as fs from "fs";
import { moveBlocks } from "../helpers";

const VOTE_NO = 0
const VOTE_YES = 1;
const VOTE_ABSTAIN = 2;

export async function vote(proposalId) {
    console.log("Voting...");

    const governor = await ethers.getContract("GovernorContract");
    const voteTx = await governor.castVoteWithReason(proposalId, VOTE_YES, VOTE_REASON);
    voteTx.wait(1);

    let proposalState = await governor.state(proposalId);
    console.log("Proposal state AFTER VOTING before voting is: ", proposalState);

    // Jump in time to finish voting period
    if (developmentChains.includes(network.name)) {
        await moveBlocks(VOTING_PERIOD + 1);
     }

}

// We get proposalId from proposal.json generated by running 'propose.ts' script
const proposals = JSON.parse(fs.readFileSync(PROPOSAL_FILE, "utf8"));
const proposalId = proposals[network.config.chainId][0];

vote(proposalId).then(() => process.exit(0)).catch(err => {
    console.log(err), process.exit(0);
});